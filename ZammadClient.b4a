Build1=Default,it.ipersoft.zammad
File1=Agent.html
File10=layweb.bal
File11=style.css
File12=System.html
File2=Customer.html
File3=hamburger.png
File4=header.jpg
File5=layaddbutton.bal
File6=layclv.bal
File7=layhome.bal
File8=laynewticket.bal
File9=LayoutLogin.bal
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
IconFile=
Library1=core
Library10=xcustomlistview
Library11=designsupport
Library12=dateutils
Library13=ahlocale
Library14=dialogs
Library15=xui views
Library16=reflection
Library2=sql
Library3=b4xencryption
Library4=randomaccessfile
Library5=appcompat
Library6=okhttp
Library7=okhttputils2
Library8=json
Library9=msmaterialdrawer
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="14" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~'End of default text.~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="@style/Theme.AppCompat.Light.DarkActionBar">~\n~        <item name="colorPrimary">#FF0000</item>~\n~        <item name="colorPrimaryDark">#FF3232</item>~\n~        <item name="colorAccent">#FFA726</item>~\n~        <item name="windowNoTitle">true</item>~\n~        <item name="windowActionBar">false</item>~\n~~\n~    </style>~\n~</resources>~\n~)
Module1=acTicket
Module10=cUsers
Module11=mUtility
Module2=Starter
Module3=KeyValueStore
Module4=cLink
Module5=cMy
Module6=cOrgs
Module7=cLanguage
Module8=types
Module9=mReadJSON
NumberOfFiles=12
NumberOfLibraries=16
NumberOfModules=11
Version=9
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Zammad Client
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
	#Extends: android.support.v7.app.AppCompatActivity
	#AdditionalRes: ..\addres\md-app\res
	#AdditionalRes: ..\addres\md-lib\res
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Public gLogin As cLogin
	Public gConnection As cConnection
	Public gLink As cLink
	Public gMy As cMy
	Public gOrgs As cOrgs
	Public gUsers As cUsers
	Public gL As cLanguage
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	Dim kC As KeyValueStore
	Private OKButton As ACButton
	Private ActionBar As ACToolBarLight
	Private pContent As Panel
	Private ABHelper As ACActionBar
	Private MDB As MSMaterialDrawerBuilder
	Private MD As MSMaterialDrawer

	Private clv As CustomListView

	Private PasswordText As B4XFloatTextField
	Private UsernameText As B4XFloatTextField
	Private ServerText As B4XFloatTextField

End Sub

Sub Activity_Create(FirstTime As Boolean)
	'Do not forget to load the layout file created with the visual designer. For example:
	gMy.Initialize
	gL.Initialize
	gL.LANGUAGE=gL.LANGUAGE_ITA
	
	kC=Starter.kConfig
	Activity.LoadLayout("LayoutLogin")
	LoadLoginValues
	Dim et As EditText = PasswordText.TextField
	et.InputType=Bit.Or(et.InputType, 0x00000080)
End Sub

Sub Activity_Resume

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub


Sub OKButton_Click
	ServerText.TextField.Enabled=False
	UsernameText.TextField.Enabled=False
	PasswordText.TextField.Enabled=False
	SaveLoginValues
	
	gConnection.Initialize
	gConnection.URL=ServerText.Text
	gConnection.Username=UsernameText.Text
	gConnection.Password=PasswordText.Text
	
	gLink.Initialize
	gLink.c=gConnection
	gLink.m=gMy
	
	
	ProgressDialogShow(gL.GetString("Connection in progress") & " ...")
	Wait For (Login) Complete (Success As Boolean)	
	ProgressDialogHide
	If Success=False Then
		Msgbox("Authentication failed","")
	End If
'	If Success=True Then
'		ProgressDialogShow(gL.LoadingOrganizations)
'		Wait For (LoadOrgs) Complete (Success As Boolean)
'		ProgressDialogHide
'		If Success=False Then
'			Msgbox(LastException,"")
'		End If
'	End If
'	If Success=True Then
'		ProgressDialogShow(gL.LoadingUsers)
'		Wait For (LoadUsers) Complete (Success As Boolean)
'		ProgressDialogHide
'		If Success=False Then
'			Msgbox(LastException,"")
'		End If
'	End If
	If Success=True Then
		gLink.l=gLogin
		GenMenu
		'ListNotifications
	End If
End Sub
Sub LoadLoginValues
	UsernameText.Text=kC.GetDefault("LOGIN","")
	ServerText.Text=kC.GetDefault("SERVER","")
End Sub
Sub SaveLoginValues
	kC.Put("LOGIN",UsernameText.Text)
	kC.Put("SERVER",ServerText.Text)
End Sub

Sub GenMenu
	Activity.RemoveAllViews
	Activity.LoadLayout("layhome")
	ActionBar.Title="Zammad Android"
	ActionBar.InitMenuListener
	
	Dim MSP As MSProfile
	'    Dim PDB1 As BitmapDrawable : PDB1.Initialize(LoadBitmap(File.DirAssets,"profile2.jpg"))
	MSP.withName(gLogin.firstname & " " & gLogin.lastname).withEmail(gLogin.organization)
	Dim msa As MSAccountHeaderBuilder
	msa.Initialize("MSA")
	Dim Profiles(1) As MSProfile
	Profiles(0) = MSP
	msa.addProfiles(Profiles)
	Dim HeaderBackground As BitmapDrawable
	HeaderBackground.Initialize(LoadBitmap(File.DirAssets,"header.jpg"))	
	msa.withHeaderBackground(HeaderBackground)
	msa.withProfileImagesVisible(False)
	msa.withSelectionListEnabled(False)
	
	MDB.Initialize("MD")
	MDB.withAccountHeader(msa.build)
	MDB.withToolbar(ActionBar)
	MDB.withActionbarToggle(True)
	MDB.withActionbarToggleAnimated(True)
	MDB.withDisplayBelowToolbar(False)
	'MDB.AddPrimaryDrawerItem(gL.GetString("Notifications"),Null,Null,"",True,10,"")
	If gLogin.isCustomer Or gLogin.isAgent Then
		MDB.AddPrimaryDrawerItem("My Ticket",Null,Null,"",True,20,"")
	End If
	If gLogin.isCustomer Or gLogin.isAgent Then
		MDB.AddPrimaryDrawerItem("Agent new tickets",Null,Null,"",True,30,"")
	End If
	If gLogin.isCustomer Or gLogin.isAgent Then
		MDB.AddPrimaryDrawerItem("Agent open tickets",Null,Null,"",True,40,"")
	End If
	If gLogin.isCustomer Or gLogin.isAgent Then
		MDB.AddPrimaryDrawerItem("Unassigned tickets",Null,Null,"",True,50,"")
	End If
	
'	If gLogin.isAdmin Or gLogin.isAgent Or gLogin.isCustomer  Then
'		MDB.AddPrimaryDrawerItem("Notifiche",Null,Null,"",True,10,"")
'	End If
'	If gLogin.isAdmin Or gLogin.isAgent Then
'		MDB.AddPrimaryDrawerItem("Aziende",Null,Null,"",True,20,"")
'	End If
'	If gLogin.isAdmin Or gLogin.isAgent Then
'		MDB.AddPrimaryDrawerItem("Utenti",Null,Null,"",True,30,"")
'	End If
	
	MD = MDB.Build
	Sleep(300)
	If gLogin.isCustomer Or gLogin.isAgent Then
		MD_ItemClick(1, 20)
	End If
	
End Sub
Sub Login As ResumableSub
	Dim j As HttpJob
	Dim sJson As String
	
	j.Initialize("",Me)
	j=gLink.GetUser(j)
	
	Wait For (j) JobDone(j As HttpJob)
	If j.Success=False Then
		Return False
		j.Release
	Else
		sJson=j.GetString
		j.Release
		gLogin=mReadJSON.JSONLogin(sJson)
		Return gLogin<>Null
	End If	
End Sub
'Sub LoadOrgs As ResumableSub
'	Dim j As HttpJob
'	Dim sJson As String
'	
'	j.Initialize("",Me)
'	j=gLink.GetOrgs(j)
'	
'	Wait For (j) JobDone(j As HttpJob)
'	If j.Success=False Then
'		Return False
'		j.Release
'	Else
'		sJson=j.GetString
'		j.Release
'		gOrgs.Initialize
'		Return gOrgs.LoadJson(sJson)
'	End If
'End Sub
'Sub LoadUsers As ResumableSub
'	Dim j As HttpJob
'	Dim sJson As String
'	
'	j.Initialize("",Me)
'	j=gLink.GetUsers(j)
'	
'	Wait For (j) JobDone(j As HttpJob)
'	If j.Success=False Then
'		Return False
'		j.Release
'	Else
'		sJson=j.GetString
'		j.Release
'		gUsers.Initialize
'		Return gUsers.LoadJson(sJson)
'	End If
'End Sub
Sub ActionBar_MenuItemClick (Item As ACMenuItem)
	If Item.Checkable Then
		Item.Checked=Not(Item.Checked)
		Select Case MD.Selection
			Case  MD.getPositionFromIdentifier(20)
			GetListTicket(True,"",False)
		End Select
	End If
	
End Sub
Sub MD_ItemClick(Position As Int, Identifier As Int)
	ActionBar.Menu.Clear
	Select Case Identifier
		Case 20
			ActionBar.SubTitle="My ticket"
			SetMenuCustomer
			GetListTicket(True,"",False)
		Case 30
			ActionBar.SubTitle="Agent new tickets"
			Dim j As HttpJob
			j.Initialize("",Me)
			j=gLink.GetTicketAgentStatus(j,"new")
			LoadTicket(j,True)
		Case 40
			ActionBar.SubTitle="Agent open tickets"
			Dim j As HttpJob
			j.Initialize("",Me)
			j=gLink.GetTicketAgentStatus(j,"open")
			LoadTicket(j,True)
		Case 50
			ActionBar.SubTitle="Unassigned tickets"
			Dim j As HttpJob
			j.Initialize("",Me)
			j=gLink.GetTicketUnassigned(j)
			LoadTicket(j,True)
	End Select
End Sub
Sub SetMenuCustomer
	Try
		ActionBar.Menu.Clear
		Dim item As ACMenuItem
		ActionBar.Menu.add(1,1,"Status",Null).ShowAsAction=item.SHOW_AS_ACTION_NEVER
		item=ActionBar.Menu.FindItem(1)
		item.Enabled=False
		ActionBar.Menu.add(2,2,"Open",Null).ShowAsAction=item.SHOW_AS_ACTION_NEVER
		item=ActionBar.Menu.FindItem(2)
		item.Checkable=True
		item.Checked=True
		ActionBar.Menu.add(3,3,"Closed",Null).ShowAsAction=item.SHOW_AS_ACTION_NEVER
		item=ActionBar.Menu.FindItem(3)
		item.Checkable=True
		item.Checked=False
	Catch
		Log(LastException)
	End Try
	
End Sub
Sub GetListTicket(Customer As Boolean,Status As String,OrgVisible As Boolean)

	
	Dim j As HttpJob
	j.Initialize("",Me)
	If Customer Then
		Dim sO As ACMenuItem
		Dim sC As ACMenuItem
		sO=ActionBar.Menu.FindItem(2)
		sC=ActionBar.Menu.FindItem(3)
		j=gLink.GetTicketCustomer(j,sO.Checked,sC.Checked)
		Else
		j=gLink.GetTicketAgentStatus(j,Status)
	End If
	
	LoadTicket(j,OrgVisible)
End Sub
Sub LoadTicket(j As HttpJob,OrgVisible As Boolean)
	pContent.RemoveAllViews
	pContent.LoadLayout("layclv")
	Dim cText As CSBuilder
	ProgressDialogShow(gL.GetString("Loading ticket") & " ...")
	Wait For (j) JobDone(j As HttpJob)
	ProgressDialogHide
	If j.Success=True Then
		Dim ListTicket As List
		ListTicket=mReadJSON.JSONListTicket(j.GetString)
		Dim n As Int
		For n=0 To ListTicket.Size-1
			Dim gTicket As cTicket
			gTicket=ListTicket.Get(n)
			cText.Initialize
			cText.Size(12).Append(gL.GetString("Number") & ": " & gTicket.number).PopAll.Append(CRLF)
			If OrgVisible Then
				cText.Size(14).Bold.Append(gTicket.organization).PopAll.Append(CRLF)
			End If
			cText.Size(20).Color(Colors.Black).Bold.Append(gTicket.title).PopAll.Append(CRLF).Append(CRLF)
			cText.Size(12).Append(gL.GetString("Status") & ": " & gL.GetString(gTicket.state))
			cText.PopAll
			clv.AddTextItem(cText,gTicket)
		Next
		
	End If
	j.Release
End Sub
'Sub ListOrgs
'	pContent.RemoveAllViews
'	pContent.LoadLayout("layclv")
'	Dim cText As CSBuilder
'	Dim Org As cOrg
'	Dim n As Int
'	gOrgs.lOrgs.Sorttype("name",True)
'	For n=0 To gOrgs.lOrgs.Size-1
'		Org=gOrgs.lOrgs.Get(n)
'		cText.Initialize		
'		cText.Append(Org.name)
'		cText.PopAll
'		clv.AddTextItem(cText,Org.id)
'	Next
'End Sub
'Sub ListUsers
'	pContent.RemoveAllViews
'	pContent.LoadLayout("layclv")
'	Dim cText As CSBuilder
'	Dim User As cUser
'	Dim n As Int
'	gUsers.lGlobal.Sorttype("firstname",True)
'	For n=0 To gUsers.lGlobal.Size-1
'		User=gUsers.lGlobal.Get(n)
'		cText.Initialize		
'		cText.Append(User.firstname & " " & User.lastname).Append(CRLF)
'		If User.organization_id<>Null Then
'			cText.Size(8).Append(gOrgs.org(User.organization_id).name)
'		End If
'		cText.PopAll
'		clv.AddTextItem(cText,User.id)
'	Next
'End Sub
'Sub ListNotifications
'	pContent.RemoveAllViews
'	pContent.LoadLayout("layclv")
'	Dim cText As CSBuilder
'
'	
'	Dim j As HttpJob
'	j.Initialize("",Me)
'	j=gLink.GetNotifications(j)
'	ProgressDialogShow(gL.LoadingNotifications)
'	Wait For (j) JobDone(j As HttpJob)
'	ProgressDialogHide
'	If j.Success=True Then
'		Dim sJson As String
'		sJson=j.GetString
'		Dim jP As JSONParser
'		jP.Initialize(sJson)
'		Dim ListN As List
'		ListN=jP.NextArray
'		Dim n As Int
'		For n=0 To ListN.Size-1
'			cText.Initialize
'			cText.Append(ListN.Get(n))
'			cText.PopAll
'			clv.AddTextItem(cText,Null)
'		Next
'		
'	End If
'	j.Release
'	
'	
'End Sub
Sub clv_ItemClick (Index As Int, Value As Object)
	Sleep(400)
	If Value Is cTicket Then
		Dim gTicket As cTicket
		gTicket=Value
		acTicket.gTicket=gTicket
		StartActivity(acTicket)
	End If
End Sub